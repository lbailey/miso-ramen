package utils

import java.util.Date
import org.joda.time.DateTime
import org.joda.time.format.DateTimeFormat

import play.api.data._
import play.api.data.format._
import play.api.data.Forms._


object RamenUtils {

  def getFormattedDate(date: Date, time: String = null) = {
    val dateTime = new DateTime(date);
    
    val fmt = DateTimeFormat.forPattern("MMMM d, yyyy");
    
    var formattedData = fmt.print(dateTime)
    
    // FIXME: Implement this in a more elegant way
    if(time == null){
      formattedData
    }else{
      formattedData + " " + time
    }
  }
  
  def availableUsername(checkName: String) = {
  	
  }
  
  def enum[E <: Enumeration](enum: E): Mapping[E#Value] = of(enumFormat(enum))

  def enumFormat[E <: Enumeration](enum: E): Formatter[E#Value] = new Formatter[E#Value] {
    def bind(key: String, data: Map[String, String]) = {
      Formats.stringFormat.bind(key, data).right.flatMap { s =>
        scala.util.control.Exception.allCatch[E#Value]
          .either(enum.withName(s))
          .left.map(e => Seq(FormError(key, "error.enum", Nil)))
      }
    }

    def unbind(key: String, value: E#Value) = Map(key -> value.toString)
  }
}
